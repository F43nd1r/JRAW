import net.dean.jraw.gradle.GitbookPush
import net.dean.jraw.gradle.VersionCommitTask

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.projectName = 'JRAW'

dependencies {
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"

    def moshi = "com.squareup.moshi:moshi:$moshiVersion"
    compile moshi
    testCompile("com.squareup.moshi:moshi-kotlin:$moshiVersion") {
        exclude group: 'com.squareup.moshi'
    }

    annotationProcessor('com.ryanharter.auto.value:auto-value-moshi:0.4.5') {
        exclude group: 'com.squareup.moshi'
    }
    annotationProcessor moshi
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"

    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    compileOnly('com.ryanharter.auto.value:auto-value-moshi-annotations:0.4.5') {
        exclude group: 'com.squareup.moshi'
    }

    testCompile "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.29'
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testCompile 'org.reflections:reflections:0.9.10'
}

sourceSets {
    gen // Generated Java code (see the :meta project)
    main {
        java {
            // Include generated sources
            source gen.allSource
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokkaJavadoc
    baseName = projectName
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = projectName
}

jar {
    baseName = projectName
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.findByName("java"))

            artifact(sourcesJar)
            artifact(javadocJar)

            pom {
                name.set("JRAW")
                description.set("Java Reddit API Wrapper")
                url.set("https://github.com/F43nd1r/JRAW")
                scm {
                    connection.set("scm:git:https://github.com/F43nd1r/JRAW.git")
                    developerConnection.set("scm:git:git@github.com:F43nd1r/JRAW.git")
                    url.set("https://github.com/F43nd1r/JRAW.git")
                }
                licenses {
                    license {
                        name.set("MIT")
                        url.set("https://github.com/F43nd1r/JRAW/blob/master/LICENSE")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("f43nd1r")
                        name.set("Lukas Morawietz")
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = project.findProperty("signingKey") as String ?: System.getenv("SIGNING_KEY")
    def signingPassword = project.findProperty("signingPassword") as String ?: System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign(publishing.publications["maven"])
}
