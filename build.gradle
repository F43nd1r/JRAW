import java.util.stream.Collectors

buildscript {
    ext.kotlinVersion = '1.4.32'
    ext.spekVersion = '1.2.1'
    ext.moshiVersion = '1.6.0'
    ext.autoValueVersion = '1.5.4'
    ext.dokkaVersion = '1.4.32'
    ext.okhttpVersion = '3.10.0'

    repositories {
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath("org.jetbrains.dokka:dokka-core:$dokkaVersion")
    }
}
plugins {
    id("io.github.gradle-nexus.publish-plugin") version "1.0.0"
}
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

subprojects {
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }

    dependencies {
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"

        testImplementation 'com.winterbe:expekt:0.5.0'
        testImplementation ("org.jetbrains.spek:spek-api:$spekVersion") {
            exclude group: 'org.jetbrains.kotlin'
        }
        testRuntime 'org.junit.platform:junit-platform-engine:1.0.0'
        testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            apiVersion = "1.4"
            languageVersion = "1.4"
            jvmTarget = "1.8"
        }
    }

    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        jacoco {
            toolVersion = "0.7.9"
            reportsDir = file("$buildDir/reports/jacoco")
            applyTo junitPlatformTestTask
        }

        project.task(type: JacocoReport, "junitPlatformJacocoReport", {
            sourceDirectories.from(files("src/main/kotlin"))
            classDirectories.from(files("$buildDir/classes/main"))
            reports {
                xml.enabled = true
                html.enabled = true
                xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
                html.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.html")
            }
            executionData junitPlatformTestTask
        })
    };

    junitPlatform {
        platformVersion '1.0.0'
        filters {
            engines {
                include 'spek'
            }
        }
    }
}

// Only do code coverage for :lib
def reportedProjects = subprojects.findAll { it.name == "lib" }
def subprojectsExecFiles = files(reportedProjects.stream().map { "${it.name}/build/jacoco/junitPlatformTest.exec" }.collect(Collectors.toList()) )

task jacocoRootReport(type: JacocoReport) {
    additionalSourceDirs.from(files(reportedProjects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(reportedProjects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(reportedProjects.sourceSets.main.output))
    executionData.from(subprojectsExecFiles)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }
}

tasks.register("build") {
    group = "build"
}

tasks.register("publish") {
    group = "publishing"
    subprojects {
        def publish = tasks.findByName("publish")
        if(publish != null) dependsOn(publish)
        def publishToSonatype = tasks.findByName("publishToSonatype")
        if(publishToSonatype != null) dependsOn(publishToSonatype)
    }
    dependsOn("closeAndReleaseSonatypeStagingRepository")
}

task clean(type: Delete) {
    group = "build"
    delete = buildDir
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(project.findProperty("ossrhUser") as String ?: System.getenv("OSSRH_USER"))
            password.set(project.findProperty("ossrhPassword") as String ?: System.getenv("OSSRH_PASSWORD"))
        }
    }
}
